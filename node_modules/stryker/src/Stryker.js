'use strict';
var _ = require('lodash');
var MutatorOrchestrator_1 = require('./MutatorOrchestrator');
var config_1 = require('stryker-api/config');
var TestRunnerOrchestrator_1 = require('./TestRunnerOrchestrator');
var ReporterOrchestrator_1 = require('./ReporterOrchestrator');
require('./jasmine_test_selector/JasmineTestSelector');
var test_runner_1 = require('stryker-api/test_runner');
var TestSelectorOrchestrator_1 = require('./TestSelectorOrchestrator');
var MutantRunResultMatcher_1 = require('./MutantRunResultMatcher');
var InputFileResolver_1 = require('./InputFileResolver');
var ConfigReader_1 = require('./ConfigReader');
var PluginLoader_1 = require('./PluginLoader');
var objectUtils_1 = require('./utils/objectUtils');
var StrykerTempFolder_1 = require('./utils/StrykerTempFolder');
var log4js = require('log4js');
var log = log4js.getLogger('Stryker');
var Stryker = (function () {
    function Stryker(options) {
        var configReader = new ConfigReader_1.default(options);
        this.config = configReader.readConfig();
        this.setGlobalLogLevel();
        this.loadPlugins();
        this.applyConfigWriters();
        this.setGlobalLogLevel();
        this.freezeConfig();
        this.reporter = new ReporterOrchestrator_1.default(this.config).createBroadcastReporter();
        this.testSelector = new TestSelectorOrchestrator_1.default(this.config).determineTestSelector();
    }
    Stryker.prototype.runMutationTest = function () {
        var _this = this;
        return new InputFileResolver_1.default(this.config.mutate, this.config.files).resolve()
            .then(function (inputFiles) { return _this.initialTestRun(inputFiles); })
            .then(function (_a) {
            var runResults = _a.runResults, inputFiles = _a.inputFiles, testRunnerOrchestrator = _a.testRunnerOrchestrator;
            return _this.generateAndRunMutations(inputFiles, runResults, testRunnerOrchestrator);
        })
            .then(function (mutantResults) { return _this.wrapUpReporter()
            .then(StrykerTempFolder_1.default.clean)
            .then(function () { return mutantResults; }); });
    };
    Stryker.prototype.filterOutUnsuccesfulResults = function (runResults) {
        return runResults.filter(function (runResult) { return !(!runResult.failed && runResult.result === test_runner_1.TestResult.Complete); });
    };
    Stryker.prototype.loadPlugins = function () {
        if (this.config.plugins) {
            new PluginLoader_1.default(this.config.plugins).load();
        }
    };
    Stryker.prototype.initialTestRun = function (inputFiles) {
        var _this = this;
        var testRunnerOrchestrator = new TestRunnerOrchestrator_1.default(this.config, inputFiles, this.testSelector, this.reporter);
        return testRunnerOrchestrator.initialRun()
            .then(function (runResults) {
            var unsuccessfulTests = _this.filterOutUnsuccesfulResults(runResults);
            if (unsuccessfulTests.length) {
                _this.logFailedTests(unsuccessfulTests);
                throw new Error('There were failed tests in the initial test run');
            }
            else {
                _this.logInitialTestRunSucceeded(runResults);
                return { runResults: runResults, inputFiles: inputFiles, testRunnerOrchestrator: testRunnerOrchestrator };
            }
        });
    };
    Stryker.prototype.generateAndRunMutations = function (inputFiles, initialRunResults, testRunnerOrchestrator) {
        var mutants = this.generateMutants(inputFiles, initialRunResults);
        if (mutants.length) {
            return testRunnerOrchestrator.runMutations(mutants);
        }
        else {
            log.info('It\'s a mutant-free world, nothing to test.');
            return Promise.resolve([]);
        }
    };
    Stryker.prototype.generateMutants = function (inputFiles, runResults) {
        var mutatorOrchestrator = new MutatorOrchestrator_1.default(this.reporter);
        var mutants = mutatorOrchestrator.generateMutants(inputFiles
            .filter(function (inputFile) { return inputFile.mutated; })
            .map(function (file) { return file.path; }));
        log.info(mutants.length + " Mutant(s) generated");
        var mutantRunResultMatcher = new MutantRunResultMatcher_1.default(mutants, runResults);
        mutantRunResultMatcher.matchWithMutants();
        return mutants;
    };
    Stryker.prototype.wrapUpReporter = function () {
        var maybePromise = this.reporter.wrapUp();
        if (objectUtils_1.isPromise(maybePromise)) {
            return maybePromise;
        }
        else {
            return Promise.resolve();
        }
    };
    Stryker.prototype.applyConfigWriters = function () {
        var _this = this;
        config_1.ConfigWriterFactory.instance().knownNames().forEach(function (configWriterName) {
            config_1.ConfigWriterFactory.instance().create(configWriterName, undefined).write(_this.config);
        });
    };
    Stryker.prototype.freezeConfig = function () {
        objectUtils_1.freezeRecursively(this.config);
        if (log.isDebugEnabled()) {
            log.debug("Using config: " + JSON.stringify(this.config));
        }
    };
    Stryker.prototype.logInitialTestRunSucceeded = function (runResults) {
        var totalAmountOfTests = 0;
        runResults.forEach(function (result) {
            if (result.succeeded) {
                totalAmountOfTests += result.succeeded;
            }
        });
        log.info('Initial test run succeeded. Ran %s tests.', totalAmountOfTests);
    };
    Stryker.prototype.setGlobalLogLevel = function () {
        log4js.setGlobalLogLevel(this.config.logLevel);
    };
    Stryker.prototype.logFailedTests = function (unsuccessfulTests) {
        var failedSpecNames = _.uniq(_.flatten(unsuccessfulTests
            .filter(function (runResult) { return runResult.result === test_runner_1.TestResult.Complete; })
            .map(function (runResult) { return runResult.testNames; })))
            .sort();
        if (failedSpecNames.length > 0) {
            var message_1 = 'One or more tests failed in the inial test run:';
            failedSpecNames.forEach(function (filename) { return message_1 += "\n\t" + filename; });
            log.error(message_1);
        }
        var errors = _.flatten(unsuccessfulTests
            .filter(function (runResult) { return runResult.result === test_runner_1.TestResult.Error; })
            .map(function (runResult) { return runResult.errorMessages; }))
            .sort();
        if (errors.length > 0) {
            var message_2 = 'One or more tests errored in the initial test run:';
            errors.forEach(function (error) { return message_2 += "\n\t" + error; });
            log.error(message_2);
        }
    };
    return Stryker;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Stryker;
//# sourceMappingURL=Stryker.js.map